import { tags } from "typia";

import { IBbsArticleCommentSnapshot } from "./IBbsArticleCommentSnapshot";
import { IBbsArticleCommentSnapshotFile } from "./IBbsArticleCommentSnapshotFile";

/**
 * Main comment entity for the evidence-preserving BBS system.
 *
 * Maps to bbs_article_comments, holds hierarchical relationships, attached
 * snapshots, and logical deletion flags.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IBbsArticleComment = {
  /** Unique identifier for the comment (bbs_article_comments.id). */
  id: string & tags.Format<"uuid">;

  /** UUID for the parent article (bbs_articles.id) this comment belongs to. */
  bbs_article_id: string & tags.Format<"uuid">;

  /**
   * Parent comment UUID (for replies/subcomments).
   *
   * Null for top-level comments.
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /** Display name of the comment's author (bbs_article_comments.writer). */
  writer: string;

  /** When the comment was first created (bbs_article_comments.created_at). */
  created_at: string & tags.Format<"date-time">;

  /** Logical deletion timestamp for evidence compliance. Null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Revision history snapshots for this comment.
   *
   * Each represents a modification state (title, body, files, IP, time,
   * etc.).
   */
  snapshots: IBbsArticleCommentSnapshot[];

  /** Immediate child/nested replies. Recursive for unlimited hierarchy depth. */
  children?: IBbsArticleComment[];
};
export namespace IBbsArticleComment {
  /**
   * Request parameters for listing, searching, and paging comments for an
   * article.
   *
   * Supports flexible filtering by author, date, parent comment (for
   * hierarchy), and standard pagination.
   */
  export type IRequest = {
    /**
     * Optional page number for pagination.
     *
     * Defines which page of the comment list to fetch.
     */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /**
     * How many comment entries should be returned per page (default 100).
     *
     * Supports UI efficiency and server protection.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "uint32";
          }>)
      | null;

    /**
     * Optional comment writer to filter results
     * (bbs_article_comments.writer).
     *
     * Enables search by author display name.
     */
    writer?: string | null;

    /**
     * Optional lower bound for comment creation datetime.
     *
     * Used for filtering searches by time window.
     */
    created_at_from?: (string & tags.Format<"date-time">) | null;

    /** Optional upper bound for comment creation datetime. */
    created_at_to?: (string & tags.Format<"date-time">) | null;

    /**
     * Parent comment's ID. Used for hierarchy filtering.
     *
     * Set for displaying top-level comments (null) or replies (non-null).
     */
    parent_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Request body to create a new comment on a BBS article.
   *
   * Initial content/format and files are included for atomic evidence
   * creation and ease of use.
   */
  export type ICreate = {
    /**
     * UUID of the parent article (bbs_articles.id) to which this comment is
     * posted.
     */
    bbs_article_id: string & tags.Format<"uuid">;

    /**
     * UUID of the parent comment if this is a reply.
     *
     * For flat comments, null. Enables unlimited depth hierarchies.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Display name used for this comment's author. Stored in
     * bbs_article_comments.writer.
     */
    writer: string;

    /**
     * Password for comment modification/deletion.
     *
     * Encrypted in storage per evidence/compliance requirements.
     */
    password: string;

    /**
     * The text body for the initial comment content (used in first snapshot
     * record creation).
     */
    initial_body: string;

    /**
     * Format type of the comment body: 'md', 'html', 'txt', etc.
     *
     * Aligns with the body format field in bbs_article_comment_snapshots.
     */
    initial_format: string;

    /**
     * Initial list of files attached to this comment when first posted.
     *
     * Relates to evidence/attachment mapping. Optionalâ€”may be empty.
     */
    initial_files?: IBbsArticleCommentSnapshotFile.ICreate[];
  };

  /**
   * Editable fields for updating a comment's metadata/relationships in
   * bbs_article_comments.
   *
   * Comment body/content is not updated here (managed via snapshot creation).
   */
  export type IUpdate = {
    /** If updated, replaces current display name for comment's author. */
    writer?: string | null;

    /** If changed, will update nesting/parent of the comment. */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * New password value, if changed.
     *
     * Stored securely (hash/encrypt) per evidence/audit policy.
     */
    password?: string;
  };
}
