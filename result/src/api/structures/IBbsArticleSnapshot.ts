import { tags } from "typia";

import { IBbsArticleSnapshotFile } from "./IBbsArticleSnapshotFile";

/**
 * Represents a single revision snapshot of an article (bbs_article_snapshots
 * table).
 *
 * Includes all fields for audit/evidence (body, title, format, ip, attachments
 * list, creation time, etc.). Used for both detail views and snapshot
 * histories.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IBbsArticleSnapshot = {
  /**
   * Unique identifier for this snapshot (UUID).
   *
   * Primary key of bbs_article_snapshots.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference article ID for this snapshot.
   *
   * Foreign key to bbs_articles.id.
   */
  bbs_article_id: string & tags.Format<"uuid">;

  /**
   * Title of the post at this revision.
   *
   * Snapshots record the state as of this revision; may differ from current.
   */
  title: string;

  /** Body/content of article at this specific revision. */
  body: string;

  /** Format for bodyâ€”one of html/md/txt/etc. */
  format: string;

  /** Writer's IP address at time of modification. */
  ip?: string;

  /**
   * Timestamp of when this revision was created. Used for precise evidence
   * chain.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Attachment files list at this revision (may differ per snapshot, follows
   * sequence/order property).
   */
  attachments?: IBbsArticleSnapshotFile.ISummary[];
};
export namespace IBbsArticleSnapshot {
  /**
   * Pagination/filter/search type for listing all revision snapshots of a
   * given article.
   *
   * Maps to the need to efficiently retrieve long modification histories.
   * Used for PATCH /bbs/articles/{articleId}/snapshots.
   */
  export type IRequest = {
    /** Filter by snapshot body format (e.g., md/html/txt). */
    format?: string;

    /** Lower date/time filter for snapshot creation. */
    createdAtFrom?: string & tags.Format<"date-time">;

    /** Upper date/time filter for snapshot creation. */
    createdAtTo?: string & tags.Format<"date-time">;

    /** Sort by creation date (default to latest first). */
    orderBy?: "createdAtDesc" | "createdAtAsc";

    /** Pagination; page number, starting from 1. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Per-page record limit, default 20. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Request schema for updating an article snapshot (admin/system only).
   *
   * Allows updating title/body/format or file association for special cases.
   * For general users, only new snapshots are created instead.
   */
  export type IUpdate = {
    /** Updated title for this snapshot (optional). */
    title?: string;

    /** Updated body/content for this snapshot (optional). */
    body?: string;

    /** Updated format (e.g., html/md/txt) for this snapshot (optional). */
    format?: string;

    /** Adjusted list of attached files for this snapshot. */
    attachments?: IBbsArticleSnapshotFile.IUpdate[];
  };

  /**
   * Request body for logical deletion of an article snapshot (admin/system
   * only).
   *
   * As evidence, snapshots are generally not deleted, but this API allows
   * logical deletion for policy/compliance needs. Fields for metadata or
   * reason may be added.
   */
  export type IDelete = {
    /** Reason for deletion (optional, for audit/compliance logging). */
    reason?: string;
  };

  /**
   * Summary view of an article snapshot.
   *
   * For embedding only the essential info about the content body/version for
   * displays or relationships. Contains fields such as title, body, format,
   * and creation time.
   */
  export type ISummary = {
    /** Snapshot UUID. */
    id: string & tags.Format<"uuid">;

    /** Title (as of this snapshot). */
    title: string;

    /** Content/body of this snapshot. */
    body: string;

    /** Body format at the time (html/md/txt). */
    format: string;

    /** IP address for evidence (stored at snapshot creation). */
    ip?: string;

    /** Snapshot creation date/time. */
    created_at: string & tags.Format<"date-time">;
  };
}
