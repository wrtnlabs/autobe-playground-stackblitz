import { tags } from "typia";

/**
 * Attachment file resource object for all file entities (attachment_files).
 *
 * Represents a managed asset for evidence, with metadata used throughout the
 * BBS UI and evidence system.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IAttachmentFile = {
  /**
   * Primary key of the attachment file resource (attachment_files.id).
   *
   * Guarantees unique identification for download, display, and management.
   */
  id: string & tags.Format<"uuid">;

  /**
   * File name (without extension).
   *
   * Directly from attachment_files.name; guides human-readable file listings.
   */
  name: string;

  /**
   * File extension if present (nullable).
   *
   * Taken from attachment_files.extension, may be null for files like README
   * or LICENSE.
   */
  extension?: string;

  /**
   * File URL for download/storage reference.
   *
   * Provided by attachment_files.url in the Prisma schema.
   */
  url: string;

  /**
   * Timestamp of file creation (ISO 8601).
   *
   * From attachment_files.created_at; ensures evidence and lifecycle audit
   * for this resource.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IAttachmentFile {
  /**
   * Summary view of attachment file info (attachment_files), for use in
   * detail/list views.
   *
   * Contains only identifying and most-accessed metadata properties for files
   * attached to snapshots or comments.
   */
  export type ISummary = {
    /** File's unique ID (attachment_files.id) */
    id: string & tags.Format<"uuid">;

    /** Filename, excluding extension. */
    name: string;

    /** File extension (can be null, e.g., README) */
    extension?: string | null;

    /** URL link to actual file storage. */
    url: string;

    /** Time at which the file was added/registered. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for searching/filtering attachment files (attachment_files).
   *
   * Provides a variety of fields for querying files for BBS management UI,
   * per requirements.
   */
  export type IRequest = {
    /**
     * File name (without extension) to search/filter.
     *
     * Corresponds to the 'name' attribute in attachment_files; supports
     * partial-matching, case-insensitive filters.
     */
    name?: string;

    /**
     * File extension to search/filter (optional).
     *
     * Checks the 'extension' column in attachment_files; can be null or
     * empty for extensionless files.
     */
    extension?: string;

    /**
     * Minimum file creation time for filter (ISO 8601 format).
     *
     * Matches attachment_files.created_at greater or equal for time-based
     * queries.
     */
    created_at_min?: string & tags.Format<"date-time">;

    /**
     * Maximum file creation time for filter (ISO 8601 format).
     *
     * Matches attachment_files.created_at less or equal for time-based
     * queries.
     */
    created_at_max?: string & tags.Format<"date-time">;
  };

  /**
   * Request body to create a new file record in the attachment_files table.
   *
   * All fields necessary for building file metadata and supporting system
   * evidence requirements.
   */
  export type ICreate = {
    /**
     * File name, without extension.
     *
     * As per attachment_files.name; provides semantic name used for
     * identifying files by users and clients.
     */
    name: string;

    /**
     * File extension (nullable).
     *
     * Corresponds to attachment_files.extension, allows for both normal and
     * extensionless files (e.g., README). May be null or omitted.
     */
    extension?: string;

    /**
     * URL of the physical file resource.
     *
     * Matches attachment_files.url; must be a valid, accessible path or
     * download location for this resource.
     */
    url: string;
  };

  /**
   * Update model for editing attributes of an attachment file record
   * (attachment_files).
   *
   * Supports correction and data hygiene activities by admins or automation
   * systems.
   */
  export type IUpdate = {
    /**
     * New file name without extension.
     *
     * Updates the attachment_files.name field for renamed assets.
     */
    name?: string;

    /**
     * New or updated extension (nullable).
     *
     * Modifies attachment_files.extension; supports cases like file format
     * correction or metadata update.
     */
    extension?: string;

    /**
     * New or corrected file URL.
     *
     * May be used if the file has been re-uploaded or migrated to new
     * storage.
     */
    url?: string;
  };
}
