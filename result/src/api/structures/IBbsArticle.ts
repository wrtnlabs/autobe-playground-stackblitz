import { tags } from "typia";

import { IBbsArticleSnapshot } from "./IBbsArticleSnapshot";
import { IBbsArticleSnapshotFile } from "./IBbsArticleSnapshotFile";
import { IBbsArticleComment } from "./IBbsArticleComment";

/**
 * Main entity type for BBS articles.
 *
 * Represents the core article record, corresponding to bbs_articles in Prisma
 * and ERD, but including related entities such as the latest snapshot, comment
 * count, and attachments list as described in the requirements. Used for
 * article detail, creation, and mutation result.
 *
 * Includes all mandatory and optional fields required for full persistence and
 * evidence, as described in requirements and schema. Each property is fully
 * documented for clarity and legal traceability.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IBbsArticle = {
  /**
   * Unique identifier of article (UUID), primary key of bbs_articles.
   *
   * Generated at creation, used for all subsequent operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Original author's name, as entered on creation.
   *
   * Read-only after creation, except for admin/system update.
   */
  writer: string;

  /**
   * Encrypted password for proof of authorship and modification/deletion
   * verification.
   *
   * Never returned in detail or list APIs, write-only (masked in UI).
   */
  password?: string & tags.Format<"password">;

  /**
   * Timestamp of original article creation.
   *
   * Mapped to bbs_articles.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when logically deleted (soft delete).
   *
   * Indicates deletion in soft-delete model. Null if not deleted, else
   * deleted. Mapped to bbs_articles.deleted_at.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Latest content snapshot for this article, showing title, body (current),
   * format, ip, and related metadata. Used for basic detail and list views.
   */
  latestSnapshot: IBbsArticleSnapshot.ISummary;

  /**
   * Total number of comments directly associated with this article
   * (non-deleted only). For UI performance and sorting.
   */
  commentCount?: number &
    tags.Type<"int32"> &
    tags.JsonSchemaPlugin<{
      format: "int32";
    }>;

  /**
   * List of attachments of the current (latest) snapshot, ordered by
   * sequence.
   */
  attachments?: IBbsArticleSnapshotFile.ISummary[];

  /**
   * Complete snapshot revision history (usually only for admin or dedicated
   * history endpoint).
   */
  snapshots?: IBbsArticleSnapshot[];

  /**
   * All associated comments (hierarchical structure not encoded here, only
   * flat by default).
   */
  comments?: IBbsArticleComment[];
};
export namespace IBbsArticle {
  /**
   * Query data type for bulletin board article search or pagination.
   *
   * This type corresponds to search, filter, sort, and pagination input for
   * the BBS article listing endpoint. Each property enables selection or
   * limitation by various fields and is mapped to the business context
   * described in the requirements (efficient retrieval, search by
   * writer/title/date, etc).
   */
  export type IRequest = {
    /**
     * Title search keyword.
     *
     * If provided, filters to articles whose latest snapshot's title
     * matches or contains the value.
     *
     * Ref: bbs_article_snapshots.title
     */
    title?: string;

    /**
     * Exact or partial writer name for search.
     *
     * Used to filter articles by the 'writer' value in bbs_articles.writer.
     */
    writer?: string;

    /**
     * Lower bound (inclusive) for article creation time.
     *
     * Filters articles newer than or equal to the specified date/time.
     *
     * Ref: bbs_articles.created_at
     */
    createdAtFrom?: string & tags.Format<"date-time">;

    /**
     * Upper bound (inclusive) for article creation time (latest).
     *
     * Show articles created before or at the specified date/time.
     */
    createdAtTo?: string & tags.Format<"date-time">;

    /**
     * Show logically deleted articles also.
     *
     * If true, include soft-deleted articles (bbs_articles.deleted_at is
     * non-null). Only allowed for admins.
     */
    deleted?: boolean;

    /**
     * Sort field for article listing.
     *
     * Maps to BBS UI sort options. Ex: 'createdAtDesc' for newest first.
     */
    orderBy?: "createdAtDesc" | "createdAtAsc" | "titleAsc" | "titleDesc";

    /** Page number for pagination (1-based). Defaults to 1. */
    page?: number &
      tags.Type<"int32"> &
      tags.Minimum<1> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Number of articles per page. Enforced max 100 to prevent overload. */
    limit?: number &
      tags.Type<"int32"> &
      tags.Default<20> &
      tags.Minimum<1> &
      tags.Maximum<100> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;
  };

  /**
   * Request body type for creating a new BBS article.
   *
   * Corresponds to the requirements for BBS post creation (including author,
   * password, content, and initial attachments). On creation, both
   * bbs_articles and the initial bbs_article_snapshots record are created in
   * a transaction. All properties are mapped to the data fields and business
   * constraints described for posting in the requirements and the DB schema.
   */
  export type ICreate = {
    /**
     * Author's name for the new article (required).
     *
     * Maps to bbs_articles.writer. Required on creation, displayable in
     * list/detail.
     */
    writer: string;

    /**
     * Author password for edit/delete. Set on create and used for future
     * auth/verification.
     *
     * Mapped to bbs_articles.password (stored encrypted). Required on
     * creation, write-only, not retrievable via detail endpoints.
     */
    password: string & tags.Format<"password">;

    /**
     * Title text for the new article's first version/snapshot.
     *
     * Mapped to bbs_article_snapshots.title. Required for creation.
     */
    title: string;

    /**
     * Body/content for the initial snapshot of the article.
     *
     * Mapped to bbs_article_snapshots.body. Required on creation.
     */
    body: string;

    /**
     * Format of the body (e.g., 'html', 'md', 'txt').
     *
     * Mapped to bbs_article_snapshots.format (content format for body
     * storage).
     */
    format: string;

    /** IP address for evidence. Recorded at creation and snapshot. */
    ip: string;

    /**
     * Initial attachment files for the article's first snapshot (optional).
     *
     * Links to attachment_files via bbs_article_snapshot_files. Specify as
     * list of IDs and sequence/order.
     */
    attachments?: IBbsArticleSnapshotFile.ICreate[];
  };

  /**
   * Request body type for updating/editing a BBS article.
   *
   * Corresponds to the business process of verifying password, establishing a
   * new snapshot with changed contents (title/body/format), and adjusting
   * attachments. All changes create new evidence records. Mapped to the 'edit
   * post' requirement and Prisma/ERD structure.
   */
  export type IUpdate = {
    /**
     * Author password to verify permission for update. Required for editing
     * or deleting articles for evidence.
     */
    password: string & tags.Format<"password">;

    /**
     * New title text for update. Used for the new snapshot. Optional if not
     * changed.
     */
    title?: string;

    /**
     * New body/content for update. Used for the new snapshot. Optional if
     * not changed.
     */
    body?: string;

    /** New format string (html/md/txt/etc.). Optional. */
    format?: string;

    /**
     * Updated list of attachment files (add/delete/reorder) for this
     * snapshot (optional).
     */
    attachments?: IBbsArticleSnapshotFile.ICreate[];

    /** IP address for evidence. Must be included for auditing. */
    ip: string;
  };

  /**
   * Request body for logical deletion (soft-delete) of a BBS article by ID.
   *
   * As per specifications, the password verifies authorship for the deletion.
   * Deletion sets deleted_at only. Evidence/history is retained. Admins may
   * have alternate logic for forced deletion.
   */
  export type IDelete = {
    /**
     * Password for logical deletion verification. Required to authorize
     * soft-delete.
     */
    password: string & tags.Format<"password">;
  };

  /**
   * Summary data for a BBS article, for list display.
   *
   * Synced to list view requirements (title, writer, comment count,
   * created_at, etc.). Does not include full snapshot/attachments/comments.
   */
  export type ISummary = {
    /** ID of the article. */
    id: string & tags.Format<"uuid">;

    /** Author's name. */
    writer: string;

    /** Title from the latest snapshot. */
    title: string;

    /** Number of comments attached (non-deleted only). */
    commentCount: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Creation time for article. */
    created_at: string & tags.Format<"date-time">;

    /** Soft delete timestamp, if present. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
