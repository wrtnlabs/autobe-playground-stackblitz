import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IBbsArticle } from "../../../structures/IBbsArticle";
import { IPageIBbsArticle } from "../../../structures/IPageIBbsArticle";
export * as snapshots from "./snapshots";
export * as comments from "./comments";

/**
 * Create a new BBS article with initial snapshot and attachments (related to
 * 'bbs_articles' table).
 *
 * This API creates a new article in the 'bbs_articles' table with all required
 * fields, such as writer name, password (secure/encrypted), and creation time.
 * The body and title are stored in the initial record in
 * 'bbs_article_snapshots', while attached files are related via
 * 'bbs_article_snapshot_files'.
 *
 * Upon success, a new article is created with its first snapshot and
 * attachments, and all references are established. Security: password will be
 * encrypted in storage. Ensure all fields follow validations in the DB schema,
 * such as non-empty strings for essential fields, proper format for UUIDs, and
 * file URL validation. The operation is atomic—all-or-nothing if
 * file/attachment data is invalid.
 *
 * Related: PATCH /bbs/articles for article listing and GET /bbs/articles/{id}
 * for detail view.
 *
 * @param body New article's information, including writer, password,
 *   body/title, format, and attachments.
 * @path /bbs/articles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  body: post.Input,
): Promise<post.Output> {
  return !!connection.simulate
    ? post.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        body,
      );
}
export namespace post {
  export type Input = IBbsArticle.ICreate;
  export type Output = IBbsArticle;

  export const METADATA = {
    method: "POST",
    path: "/bbs/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/bbs/articles";
  export const random = (g?: Partial<typia.IRandomGenerator>): IBbsArticle =>
    typia.random<IBbsArticle>(g);
  export const simulate = (
    connection: IConnection,
    body: post.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieve a list of BBS articles ('bbs_articles' table) with filtering,
 * search, and pagination.
 *
 * This API retrieves a paginated and filtered list of articles from the
 * 'bbs_articles' table. The endpoint should support standard search fields,
 * such as title, writer, or date range, reflecting the need for efficient
 * querying and performance optimization as outlined in the requirements.
 *
 * The response includes only the latest snapshot information (title, etc.) and
 * not the complete snapshot history for each article, consistent with index
 * usage and list performance needs. Security considerations include returning
 * only non-deleted articles to general users; deleted articles may be included
 * for admins based on role.
 *
 * Related operations: GET /bbs/articles/{id} for detail view, PATCH
 * /bbs/articles/{articleId}/snapshots for snapshots list, and CRUD operations
 * for creation, update, and deletion. Consider error handling for invalid
 * queries and paging boundaries.
 *
 * @param body Search criteria, filtering, sorting, and pagination for
 *   retrieving article list.
 * @path /bbs/articles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  body: patch.Input,
): Promise<patch.Output> {
  return !!connection.simulate
    ? patch.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        body,
      );
}
export namespace patch {
  export type Input = IBbsArticle.IRequest;
  export type Output = IPageIBbsArticle.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/bbs/articles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/bbs/articles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIBbsArticle.ISummary => typia.random<IPageIBbsArticle.ISummary>(g);
  export const simulate = (
    connection: IConnection,
    body: patch.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get detail information of a specific BBS article ('bbs_articles' table),
 * including latest snapshot and attachments.
 *
 * This API provides detail for a single article from the 'bbs_articles' table,
 * identified by its UUID. Main output fields are writer, creation/deletion
 * time, the latest snapshot's title/body/format, and summary of attachments and
 * comments.
 *
 * Validation includes ensuring the article exists and is not deleted (for
 * general users), with soft-deleted articles only visible for admins/staff.
 * Response incorporates summarized comment count, facilitating user interface
 * efficiency. Error handling covers 'not found' and forbidden access on deleted
 * items.
 *
 * Related: PATCH /bbs/articles for lists, PATCH
 * /bbs/articles/{articleId}/snapshots for modification history.
 *
 * @param id UUID of the BBS article to retrieve.
 * @path /bbs/articles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
): Promise<getById.Output> {
  return !!connection.simulate
    ? getById.simulate(connection, id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(id),
          status: null,
        },
      );
}
export namespace getById {
  export type Output = IBbsArticle;

  export const METADATA = {
    method: "GET",
    path: "/bbs/articles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/bbs/articles/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IBbsArticle =>
    typia.random<IBbsArticle>(g);
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a specific BBS article ('bbs_articles' table); creates a new snapshot
 * with attachments.
 *
 * This API modifies an existing BBS article. Upon update, password is verified
 * then a new snapshot is inserted in 'bbs_article_snapshots', containing the
 * revised title/body/format and new/updated attachments listed via
 * 'bbs_article_snapshot_files'.
 *
 * The original article's record in 'bbs_articles' is not overwritten; only new
 * snapshot/attachments are created to preserve evidence, as per requirements.
 * Security: password verification is strict, and all updates are timestamped.
 * All DB constraints and validation are applied (e.g., title, body not empty).
 *
 * Error cases include unauthorized access, not found, or validation failures.
 * The operation is atomic—either the snapshot and all attachments are created,
 * or none are.
 *
 * @param id UUID of the article to update.
 * @param body Updated article content, verified via password, with attachments
 *   list.
 * @path /bbs/articles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
  body: putById.Input,
): Promise<putById.Output> {
  return !!connection.simulate
    ? putById.simulate(connection, id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(id),
          status: null,
        },
        body,
      );
}
export namespace putById {
  export type Input = IBbsArticle.IUpdate;
  export type Output = IBbsArticle;

  export const METADATA = {
    method: "PUT",
    path: "/bbs/articles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/bbs/articles/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IBbsArticle =>
    typia.random<IBbsArticle>(g);
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
    body: putById.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Soft-delete a specific article ('bbs_articles' table); sets 'deleted_at',
 * preserves evidence.
 *
 * This API marks an article as logically deleted (soft delete) by setting the
 * 'deleted_at' timestamp, per requirements. The request must provide password
 * verification.
 *
 * The operation does not alter existing snapshot or attachment file records,
 * preserving all evidence. Soft-deleted articles are hidden from non-admin
 * users. Security: password must match and be securely provided; deleted
 * articles remain retrievable by admins for audits if needed.
 *
 * Error scenarios: unauthorized/deletion of already deleted, or article not
 * found. Proper error is returned (e.g., forbidden, not found).
 *
 * @param id UUID of the article to delete.
 * @param body Password for verification prior to soft-deletion.
 * @path /bbs/articles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
  body: eraseById.Input,
): Promise<eraseById.Output> {
  return !!connection.simulate
    ? eraseById.simulate(connection, id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(id),
          status: null,
        },
        body,
      );
}
export namespace eraseById {
  export type Input = IBbsArticle.IDelete;
  export type Output = IBbsArticle;

  export const METADATA = {
    method: "DELETE",
    path: "/bbs/articles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/bbs/articles/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): IBbsArticle =>
    typia.random<IBbsArticle>(g);
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
    body: eraseById.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
