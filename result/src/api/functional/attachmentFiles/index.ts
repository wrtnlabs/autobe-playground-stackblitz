import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IAttachmentFile } from "../../structures/IAttachmentFile";
import { IPageIAttachmentFile } from "../../structures/IPageIAttachmentFile";

/**
 * Creates a new attachment file resource (attachment_files) with required
 * metadata and file URL.
 *
 * This endpoint provisions a new file record in the attachment_files table,
 * referencing metadata for an already-uploaded asset. The request body conforms
 * to IAttachmentFile.ICreate, containing the file name, extension (nullable),
 * and file URL. On success, it returns the created file resource with full
 * metadata and unique assigned UUID. Cascade relationships in the schema
 * guarantee that any later association to articles or comments snapshots is
 * transactional and consistent.
 *
 * The file must be accessible by given URL and reserved for evidence retention
 * purposes. Multiple objects can reference the same file asset as attachments,
 * enabled by the join tables. Security and validation ensure the integrity and
 * uniqueness of file records.
 *
 * @param body File resource metadata including name, extension, and file URL.
 * @path /attachmentFiles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function post(
  connection: IConnection,
  body: post.Input,
): Promise<post.Output> {
  return !!connection.simulate
    ? post.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...post.METADATA,
          path: post.path(),
          status: null,
        },
        body,
      );
}
export namespace post {
  export type Input = IAttachmentFile.ICreate;
  export type Output = IAttachmentFile;

  export const METADATA = {
    method: "POST",
    path: "/attachmentFiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attachmentFiles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttachmentFile => typia.random<IAttachmentFile>(g);
  export const simulate = (
    connection: IConnection,
    body: post.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: post.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Retrieves a paginated, searchable, sortable list of file resources
 * (attachment_files).
 *
 * This operation retrieves a list of file resources managed in the system
 * (attachment_files table), supporting flexible searching and filtering
 * capabilities according to user, admin, or system automation needs. Supports
 * pagination, sorting by date/filename, and querying by file type or other
 * metadata, improving file list usability in UI grids and admin panels.
 *
 * Search requests reference the IAttachmentFile.IRequest schema, encapsulating
 * search and filter parameters, and responses return IPageIAttachmentFile,
 * containing pagination metadata plus file entries. Deletion/creation is
 * handled via separate endpoints, and logical deletion policies must be
 * respected if implemented in the table.
 *
 * @param body File search and filter parameters (filename, extension,
 *   createdAt, etc.)
 * @path /attachmentFiles
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function patch(
  connection: IConnection,
  body: patch.Input,
): Promise<patch.Output> {
  return !!connection.simulate
    ? patch.simulate(connection, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...patch.METADATA,
          path: patch.path(),
          status: null,
        },
        body,
      );
}
export namespace patch {
  export type Input = IAttachmentFile.IRequest;
  export type Output = IPageIAttachmentFile;

  export const METADATA = {
    method: "PATCH",
    path: "/attachmentFiles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/attachmentFiles";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPageIAttachmentFile => typia.random<IPageIAttachmentFile>(g);
  export const simulate = (
    connection: IConnection,
    body: patch.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: patch.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Gets a specific attachment file resource (attachment_files) by its UUID ID.
 *
 * Fetch details for a single file resource from attachment_files by its system
 * ID (UUID). Results include filename, extension, download URL, and other
 * metadata for correct rendering and download in UI or for API-based
 * consumption. Soft/hard delete status must be respected by this endpoint if
 * supported in the schema, showing only valid, non-deleted resources as
 * appropriate. Error handling required for missing IDs.
 *
 * @param id Target file resource's ID
 * @path /attachmentFiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function getById(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
): Promise<getById.Output> {
  return !!connection.simulate
    ? getById.simulate(connection, id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getById.METADATA,
          path: getById.path(id),
          status: null,
        },
      );
}
export namespace getById {
  export type Output = IAttachmentFile;

  export const METADATA = {
    method: "GET",
    path: "/attachmentFiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/attachmentFiles/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttachmentFile => typia.random<IAttachmentFile>(g);
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: getById.path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Updates metadata for an attachment file (attachment_files), e.g., filename,
 * extension, or URL.
 *
 * This endpoint enables authorized changes to metadata for an attachment file
 * in the attachment_files table, such as filename, extension, or URL. The
 * request body IAttachmentFile.IUpdate allows for one or more of these fields
 * to be edited. Cascade relationships maintain referential integrity with join
 * tables; updating file resources is critical for correcting errors or unifying
 * data.
 *
 * Audit/compliance logging recommended for all changes; proper permission
 * checks are required. Actual file content is not altered by this DB operation,
 * only system-associated metadata.
 *
 * @param id Target file resource's ID
 * @param body Updated metadata values for the attachment file (name, extension,
 *   url).
 * @path /attachmentFiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function putById(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
  body: putById.Input,
): Promise<putById.Output> {
  return !!connection.simulate
    ? putById.simulate(connection, id, body)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...putById.METADATA,
          path: putById.path(id),
          status: null,
        },
        body,
      );
}
export namespace putById {
  export type Input = IAttachmentFile.IUpdate;
  export type Output = IAttachmentFile;

  export const METADATA = {
    method: "PUT",
    path: "/attachmentFiles/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/attachmentFiles/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IAttachmentFile => typia.random<IAttachmentFile>(g);
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
    body: putById.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: putById.path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
      assert.body(() => typia.assert(body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Physically deletes (fully removes) a file resource (attachment_files) by its
 * system ID.
 *
 * This endpoint allows full (hard) deletion of a file resource from the
 * attachment_files table. It is restricted to situations where evidence
 * retention policy and all association constraints are addressed. All children
 * join records (bbs_article_snapshot_files, bbs_article_comment_snapshot_files)
 * must be evaluated for foreign key safety—usually via ON DELETE CASCADE.
 *
 * Logical deletion may be preferable in auditing scenarios; however, this
 * endpoint completely removes the file record, thus any download or reference
 * links will become defunct. Only highly privileged actions and system clean-up
 * tasks should invoke this.
 *
 * @param id Target file resource's ID
 * @path /attachmentFiles/:id
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function eraseById(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
): Promise<void> {
  return !!connection.simulate
    ? eraseById.simulate(connection, id)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...eraseById.METADATA,
          path: eraseById.path(id),
          status: null,
        },
      );
}
export namespace eraseById {
  export const METADATA = {
    method: "DELETE",
    path: "/attachmentFiles/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/attachmentFiles/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    id: string & tags.Format<"uuid">,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: eraseById.path(id),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
